generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int         @id @default(autoincrement())
  password              String
  createdAt             DateTime    @default(now())
  email                 String      @unique
  name                  String
  phoneNumber           String?
  roleId                Int?
  isActive              Boolean     @default(true)
  lastLoggedInOn        DateTime?
  requirePasswordReset  Boolean     @default(false)
  lastPasswordChangedOn DateTime    @default(now())
  farmerUser            FarmerUser? @relation("UserFarmerUser")
  createdPesticides     Pesticide[] @relation("CreatedBy")
  updatedPesticides     Pesticide[] @relation("LastUpdatedBy")
  sspUser               SspUser?    @relation("UserSspUser")
  role                  Role?       @relation(fields: [roleId], references: [id])
  customer              Customer?
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  createdAt       DateTime         @default(now())
  createdById     Int?
  isActive        Boolean          @default(false)
  lastUpdatedAt   DateTime?
  lastUpdatedById Int?
  permissions     RolePermission[]
  users           User[]
}

model Permission {
  id    Int              @id @default(autoincrement())
  name  String           @unique
  roles RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Pesticide {
  id                       Int       @id @default(autoincrement())
  registrationNumber       String    @unique
  activeAgent              String
  manufacturerOfRegistrant String
  localAgent               String
  published                Boolean   @default(false)
  createdAt                DateTime  @default(now())
  lastUpdatedAt            DateTime?
  createdById              Int?
  lastUpdatedById          Int?
  name                     String    @unique
  createdBy                User?     @relation("CreatedBy", fields: [createdById], references: [id])
  lastUpdatedBy            User?     @relation("LastUpdatedBy", fields: [lastUpdatedById], references: [id])
}

model Pest {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  scientificName  String    @unique
  kingdom         String
  phylum          String?
  genus           String
  family          String
  published       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  lastUpdatedAt   DateTime?
  createdById     Int?
  lastUpdatedById Int?
}

model County {
  id              Int          @id @default(autoincrement())
  name            String       @unique
  isActive        Boolean      @default(false)
  createdAt       DateTime     @default(now())
  lastUpdatedAt   DateTime?
  createdById     Int?
  lastUpdatedById Int?
  farms           FarmerFarm[] @relation("FarmInCounty")
  ssps            SspUser[]    @relation("SspInCounty")
}

model ServiceType {
  id                Int                     @id @default(autoincrement())
  name              String                  @unique
  description       String
  isActive          Boolean                 @default(false)
  createdAt         DateTime                @default(now())
  lastUpdatedAt     DateTime?
  createdById       Int?
  lastUpdatedById   Int?
  servicesRequested ServiceRequestService[]
}

model SspUser {
  id               Int              @id @default(autoincrement())
  email            String           @unique
  phoneNumber      String           @unique
  firstName        String
  middleName       String?
  lastName         String
  userId           Int?             @unique
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  lastUpdatedAt    DateTime         @updatedAt
  createdById      Int?
  lastUpdatedById  Int?
  dob              String?
  gender           String?
  occupation       String?
  countyId         Int?
  assignedRequests ServiceRequest[] @relation("SspAssignedServiceRequest")
  bids             SspBidding[]
  schedules        SspSchedule[]
  county           County?          @relation("SspInCounty", fields: [countyId], references: [id], onDelete: Cascade)
  user             User?            @relation("UserSspUser", fields: [userId], references: [id], onDelete: Cascade)
}

model FarmerUser {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  phoneNumber     String
  gender          String?
  occupation      String?
  dob             String?
  firstName       String
  middleName      String?
  lastName        String
  userId          Int?             @unique
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  lastUpdatedAt   DateTime         @updatedAt
  createdById     Int?
  lastUpdatedById Int?
  farms           FarmerFarm[]     @relation("FarmerFarmUser")
  user            User?            @relation("UserFarmerUser", fields: [userId], references: [id], onDelete: Cascade)
  serviceRequests ServiceRequest[] @relation("FarmerServiceRequest")
  serviceBids     SspBidding[]
}

model FarmerFarm {
  id              Int              @id @default(autoincrement())
  plotSize        String?
  countyId        Int?
  location        String?
  latitude        String?
  longitude       String?
  imageUrl        String?
  farmerId        Int?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  lastUpdatedAt   DateTime         @updatedAt
  createdById     Int?
  lastUpdatedById Int?
  altitude        String?
  humidity        String?
  soilTemp        String?
  soilType        String?
  crops           CropsInFarm[]    @relation("CropsInFarm")
  county          County?          @relation("FarmInCounty", fields: [countyId], references: [id], onDelete: Cascade)
  farmer          FarmerUser?      @relation("FarmerFarmUser", fields: [farmerId], references: [id], onDelete: Cascade)
  serviceRequests ServiceRequest[] @relation("FarmServices")
}

model Crop {
  id              Int                   @id @default(autoincrement())
  name            String                @unique
  scientificName  String?
  description     String?
  isActive        Boolean               @default(false)
  createdAt       DateTime              @default(now())
  lastUpdatedAt   DateTime?             @updatedAt
  createdById     Int?
  lastUpdatedById Int?
  farms           CropsInFarm[]         @relation("CropsInFarm")
  serviceRequests ServiceRequestCrops[] @relation("CropsInRequest")
}

model CropsInFarm {
  id              Int        @id @default(autoincrement())
  farmId          Int
  cropId          Int
  description     String?
  cropStatus      String?
  isActive        Boolean    @default(false)
  createdAt       DateTime   @default(now())
  lastUpdatedAt   DateTime?  @updatedAt
  createdById     Int?
  lastUpdatedById Int?
  crop            Crop       @relation("CropsInFarm", fields: [cropId], references: [id], onDelete: Cascade)
  farm            FarmerFarm @relation("CropsInFarm", fields: [farmId], references: [id], onDelete: Cascade)
}

model ServiceRequest {
  id                   Int                     @id @default(autoincrement())
  description          String?
  farmerId             Int?
  farmId               Int
  assignedSspId        Int?
  requestStatus        String?
  isActive             Boolean                 @default(true)
  createdAt            DateTime                @default(now())
  dateStarted          DateTime?
  dateCompleted        DateTime?
  lastUpdatedAt        DateTime                @updatedAt
  createdById          Int?
  lastUpdatedById      Int?
  serviceCosts         Float?
  sspRating            Int?
  isConfirmed          Boolean                 @default(false)
  isPublished          Boolean                 @default(true)
  requestDate          DateTime?
  requestedServicesIds String?
  urgency              String?
  farmersBudget        Float?
  sspScheduleId        Int?
  assignedSsp          SspUser?                @relation("SspAssignedServiceRequest", fields: [assignedSspId], references: [id])
  farm                 FarmerFarm              @relation("FarmServices", fields: [farmId], references: [id], onDelete: Cascade)
  farmer               FarmerUser?             @relation("FarmerServiceRequest", fields: [farmerId], references: [id], onDelete: Cascade)
  crops                ServiceRequestCrops[]
  servicesRequested    ServiceRequestService[]
  bids                 SspBidding[]
  assignedSspSchedule  SspSchedule?
}

model ServiceRequestService {
  id               Int            @id @default(autoincrement())
  serviceTypeId    Int
  serviceRequestId Int
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  serviceType      ServiceType    @relation(fields: [serviceTypeId], references: [id], onDelete: Cascade)
}

model ServiceRequestCrops {
  id               Int            @id @default(autoincrement())
  cropId           Int
  serviceRequestId Int
  crop             Crop           @relation("CropsInRequest", fields: [cropId], references: [id], onDelete: Cascade)
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
}

model SspSchedule {
  id               Int             @id @default(autoincrement())
  sspId            Int
  date             DateTime
  startTime        DateTime
  endTime          DateTime
  isBooked         Boolean         @default(false)
  createdAt        DateTime        @default(now())
  lastUpdatedAt    DateTime        @updatedAt
  isAvailable      Boolean         @default(true)
  serviceRequestId Int?            @unique
  hasRequests      Boolean         @default(false)
  serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  ssp              SspUser         @relation(fields: [sspId], references: [id], onDelete: Cascade)
}

model SspBidding {
  id                Int            @id @default(autoincrement())
  serviceRequestId  Int
  sspId             Int
  farmerId          Int
  scheduleId        String?
  status            String         @default("Pending")
  createdAt         DateTime       @default(now())
  lastUpdatedAt     DateTime       @updatedAt
  requestedByFarmer Boolean        @default(false)
  farmer            FarmerUser     @relation(fields: [farmerId], references: [id], onDelete: Cascade)
  serviceRequest    ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  ssp               SspUser        @relation(fields: [sspId], references: [id], onDelete: Cascade)
}

model CaseStudy {
  id        String             @id @default(uuid())
  slug      String             @unique
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  sections  CaseStudySection[] @relation("CaseStudyToSections")

  @@map("CaseStudy")
}

model CaseStudySection {
  id          String                  @id @default(uuid())
  caseStudyId String
  order       Int
  type        SectionType
  data        Json
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  caseStudy   CaseStudy               @relation("CaseStudyToSections", fields: [caseStudyId], references: [id], onDelete: Cascade)
  media       CaseStudySectionMedia[]

  @@index([caseStudyId])
}

/// This model maps exactly to your existing `SectionMedia` table
model CaseStudySectionMedia {
  id                 String           @id @default(uuid())
  caseStudySectionId String
  mimeType           String
  blob               Bytes
  section            CaseStudySection @relation(fields: [caseStudySectionId], references: [id], onDelete: Cascade)

  @@index([caseStudySectionId])
  @@map("SectionMedia")
}

model Newsletter {
  id            String              @id @default(uuid())
  title         String
  description   String
  date          DateTime
  category      NewsletterCategory
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  imageBlob     Bytes
  imageMimeType String
  sections      NewsletterSection[] @relation("NewsletterToSections")

  @@index([date])
}

model NewsletterSection {
  id           String                   @id @default(uuid())
  newsletterId String
  order        Int
  type         SectionType
  data         Json
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  newsletter   Newsletter               @relation("NewsletterToSections", fields: [newsletterId], references: [id], onDelete: Cascade)
  media        NewsletterSectionMedia[]

  @@index([newsletterId])
}

/// This will create a new table `NewsletterSectionMedia`
model NewsletterSectionMedia {
  id                  String            @id @default(uuid())
  newsletterSectionId String
  mimeType            String
  blob                Bytes
  section             NewsletterSection @relation(fields: [newsletterSectionId], references: [id], onDelete: Cascade)

  @@index([newsletterSectionId])
}

model SslStaff {
  id                   String          @id
  name                 String
  type                 String
  borrowerId           String
  email                String
  sslId                String
  nationalIdNumber     String
  nationalIdFront      String?
  nationalIdBack       String?
  kraPinNumber         String?
  kraPinPhoto          String?
  phoneNumber          String
  status               String          @default("Active")
  roleInSchool         String
  dateOfBirth          String
  address              String
  gender               String
  postalAddress        String?
  startDate            String
  insuredForCreditLife Boolean         @default(false)
  paymentThisMonth     Boolean         @default(false)
  terminationDate      String?
  educationLevel       String?
  sslEmail             String?
  secondaryRole        String?
  monthlyTarget        String?
  creditLifeHelper     String?
  teamLeader           String?
  passportPhoto        String?
  sslLevel             String?
  sslArea              String?
  isActive             Boolean         @default(true)
  createdAt            DateTime        @default(now())
  lastUpdatedAt        DateTime        @updatedAt
  createdById          Int?
  lastUpdatedById      Int?
  dailyWorkPlans       DailyWorkPlan[]

  @@map("ssl_staff")
}

model DailyWorkPlan {
  id                       Int      @id @default(autoincrement())
  date                     DateTime
  plannedVisit             String
  actualGpsCoordinates     String?
  callsMadeDescription     String
  notes                    String?
  supervisorReview         String?
  status                   String   @default("Pending")
  sslStaffId               String
  createdAt                DateTime @default(now())
  lastUpdatedAt            DateTime @updatedAt
  createdById              Int?
  lastUpdatedById          Int?
  locationIsVerified       Boolean  @default(false)
  marketingOfficerComments String?
  pinnedLocation           String?
  region                   String?
  schoolName               String?
  taskOfTheDay             String?
  teamLeaderId             String?
  schoolId                 String?
  school                   School?  @relation(fields: [schoolId], references: [id])
  sslStaff                 SslStaff @relation(fields: [sslStaffId], references: [id], onDelete: Cascade)

  @@map("daily_work_plan")
}

model School {
  id                 String          @id
  name               String
  schoolId           String          @unique
  email              String?
  phoneNumber        String?
  address            String?
  postalAddress      String?
  county             String?
  region             String?
  schoolType         String?
  status             String          @default("Active")
  principalName      String?
  principalPhone     String?
  principalEmail     String?
  totalStudents      Int?
  totalTeachers      Int?
  registrationNumber String?
  establishmentDate  String?
  isActive           Boolean         @default(true)
  createdAt          DateTime        @default(now())
  lastUpdatedAt      DateTime        @updatedAt
  createdById        Int?
  lastUpdatedById    Int?
  locationPin        String?
  sslId              String?
  dailyWorkPlans     DailyWorkPlan[]

  @@map("schools")
}

model Vehicle {
  id                     Int           @id @default(autoincrement())
  make                   String
  model                  String
  licensePlate           String        @unique
  vin                    String        @unique
  year                   Int
  color                  String?
  fuelType               String?
  mileage                Int?
  registrationExpiry     DateTime?
  isActive               Boolean       @default(true)
  notes                  String?
  createdAt              DateTime      @default(now())
  lastUpdatedAt          DateTime      @updatedAt
  createdById            Int?
  lastUpdatedById        Int?
  averageFuelConsumption Float?
  pricePerKm             Float?
  maintenances           Maintenance[]
  trips                  Trip[]
}

model Driver {
  id                 Int       @id @default(autoincrement())
  firstName          String
  middleName         String?
  lastName           String
  email              String    @unique
  phoneNumber        String
  licenseNumber      String    @unique
  licenseExpiry      DateTime
  dateOfBirth        DateTime?
  address            String?
  emergencyContact   String?
  emergencyPhone     String?
  isActive           Boolean   @default(true)
  notes              String?
  createdAt          DateTime  @default(now())
  lastUpdatedAt      DateTime  @updatedAt
  createdById        Int?
  lastUpdatedById    Int?
  driverLicensePhoto String?
  gender             String
  idPhoto            String?
  nationalId         String    @unique
  passportPhoto      String?
  psvLicenseDoc      String?
  trips              Trip[]
}

model Maintenance {
  id               Int       @id @default(autoincrement())
  vehicleId        Int
  maintenanceType  String
  description      String
  scheduledDate    DateTime
  completedDate    DateTime?
  cost             Float?
  serviceProvider  String?
  invoiceNumber    String?
  isCompleted      Boolean   @default(false)
  notes            String?
  mileageAtService Int?
  createdAt        DateTime  @default(now())
  lastUpdatedAt    DateTime  @updatedAt
  createdById      Int?
  lastUpdatedById  Int?
  vehicle          Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

model Trip {
  id              Int           @id @default(autoincrement())
  vehicleId       Int
  driverId        Int
  startTime       DateTime
  endTime         DateTime?
  purpose         String
  notes           String?
  createdAt       DateTime      @default(now())
  lastUpdatedAt   DateTime      @updatedAt
  createdById     Int?
  lastUpdatedById Int?
  customerName    String?
  customerPhone   String?
  distance        Float?
  feedback        String?
  fuelConsumption Float?
  fuelCost        Float?
  paymentMethod   String?
  paymentStatus   PaymentStatus @default(PENDING)
  pricePerKm      Float
  rating          Int?
  totalPrice      Float?
  status          TripStatus    @default(SCHEDULED)
  endGps          String?
  startGps        String
  driver          Driver        @relation(fields: [driverId], references: [id], onDelete: Cascade)
  vehicle         Vehicle       @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

model Borrower {
  id                          Int       @id @default(autoincrement())
  sheetId                     String?   @unique
  customerType                String?
  type                        String?
  name                        String?
  locationDescription         String?
  societyCertificate          String?
  yearFounded                 String?
  sslId                       String?
  locationPin                 String?
  historicalPaymentDetails    String?
  paymentMethod               String?
  bankName                    String?
  accountName                 String?
  accountNumber               String?
  primaryPhone                String?
  documentVerifyingAccount    String?
  managerVerification         String?
  status                      String?
  notes                       String?
  entityType                  String?
  registrationNumber          String?
  notesOnStatus               String?
  officialSearch              String?
  pelezaSearch                String?
  productsRequested           String?
  dataCollectionProgress      Float?
  initialContactNotes         String?
  kraPinPhoto                 String?
  kraPinNumber                String?
  createdAt                   DateTime? @default(now())
  createdBy                   String?
  howHeard                    String?
  monthYearCreated            String?
  moeCertified                String?
  moeCertificate              String?
  county                      String?
  cr12                        String?
  nationalIdNumber            String?
  nationalIdFront             String?
  nationalIdBack              String?
  dateOfBirth                 String?
  privateOrApbet              String?
  relatedCreditApplications   String?
  relatedHandoversGivingId    String?
  relatedHandoversReceivingId String?
  relatedCrbConsents          String?
  relatedCollaterals          String?
  relatedUsers                String?
  relatedReferrers            String?
  relatedCustomerCareCalls    String?
  relatedEscalations          String?
  relatedEnrollmentReports    String?
  relatedLoans                String?
  relatedDirPaymentSchedules  String?
  relatedCollateralsByLoanId  String?
  synced                      Boolean   @default(false)
}

model Director {
  id                   Int       @id @default(autoincrement())
  sheetId              String?   @unique
  borrowerId           String?
  name                 String?
  nationalIdNumber     String?
  kraPinNumber         String?
  phoneNumber          String?
  email                String?
  gender               String?
  roleInSchool         String?
  status               String?
  dateOfBirth          String?
  educationLevel       String?
  insuredForCreditLife String?
  address              String?
  postalAddress        String?
  nationalIdFront      String?
  nationalIdBack       String?
  kraPinPhoto          String?
  passportPhoto        String?
  createdAt            DateTime? @default(now())
  synced               Boolean   @default(false)
  type                 String?
}

model CrbConsent {
  id                 Int       @id @default(autoincrement())
  sheetId            String?   @unique
  borrowerId         String?
  agreement          String?
  signedByName       String?
  date               String?
  roleInOrganization String?
  signature          String?
  createdAt          DateTime? @default(now())
  synced             Boolean   @default(false)
}

model Referrer {
  id                 Int       @id @default(autoincrement())
  sheetId            String?   @unique
  schoolId           String?
  referrerName       String?
  mpesaNumber        String?
  referralRewardPaid String?
  datePaid           String?
  amountPaid         String?
  proofOfPayment     String?
  createdAt          DateTime? @default(now())
  synced             Boolean   @default(false)
}

model CreditApplication {
  id                              Int       @id @default(autoincrement())
  sheetId                         String?   @unique
  customerType                    String?
  borrowerId                      String?
  applicationStartDate            String?
  creditType                      String?
  workingCapitalApplicationNumber String?
  sslActionNeeded                 String?
  sslAction                       String?
  sslId                           String?
  sslFeedbackOnAction             String?
  schoolCrbAvailable              String?
  referredBy                      String?
  photoOfCheck                    String?
  status                          String?
  commentsOnChecks                String?
  createdAt                       DateTime? @default(now())
  synced                          Boolean   @default(false)
  totalAmountRequested            Float?
  currentCostOfCapital            Float?
  checksCollected                 Float?
  checksNeededForLoan             Float?
  finalAmountApprovedAndDisbursed Float?
}

model ActiveDebt {
  id                                 Int       @id @default(autoincrement())
  sheetId                            String?   @unique
  creditApplicationId                String?
  debtStatus                         String?
  listedOnCrb                        String?
  personalLoanOrSchoolLoan           String?
  lender                             String?
  dateLoanTaken                      String?
  finalDueDate                       String?
  totalLoanAmount                    Float?
  balance                            Float?
  amountOverdue                      Float?
  monthlyPayment                     Float?
  debtStatement                      String?
  annualDecliningBalanceInterestRate Float?
  isLoanCollateralized               String?
  typeOfCollateral                   String?
  whatWasLoanUsedFor                 String?
  createdAt                          DateTime? @default(now())
  synced                             Boolean   @default(false)
}

model FeePlan {
  id                  Int       @id @default(autoincrement())
  sheetId             String?   @unique
  creditApplicationId String?
  schoolYear          String?
  photo               String?
  file                String?
  createdAt           DateTime? @default(now())
  synced              Boolean   @default(false)
}

model Payroll {
  id                         Int       @id @default(autoincrement())
  sheetId                    String?   @unique
  creditApplicationId        String?
  role                       String?
  numberOfEmployeesInRole    Int?
  monthlySalary              Float?
  monthsPerYearTheRoleIsPaid Int?
  notes                      String?
  totalAnnualCost            Float?
  createdAt                  DateTime? @default(now())
  synced                     Boolean   @default(false)
}

model EnrollmentVerification {
  id                          Int       @id @default(autoincrement())
  sheetId                     String?   @unique
  creditApplicationId         String?
  subCountyEnrollmentReport   String?
  enrollmentReport            String?
  numberOfStudentsThisYear    Int?
  numberOfStudentsLastYear    Int?
  numberOfStudentsTwoYearsAgo Int?
  createdAt                   DateTime? @default(now())
  synced                      Boolean   @default(false)
}

model MpesaBankStatement {
  id                        Int       @id @default(autoincrement())
  sheetId                   String?   @unique
  creditApplicationId       String?
  personalOrBusinessAccount String?
  type                      String?
  accountDetails            String?
  description               String?
  statement                 String?
  statementStartDate        String?
  statementEndDate          String?
  totalRevenue              Float?
  convertedExcelFile        String?
  createdAt                 DateTime? @default(now())
  synced                    Boolean   @default(false)
}

model AuditedFinancial {
  id                  Int       @id @default(autoincrement())
  sheetId             String?   @unique
  creditApplicationId String?
  statementType       String?
  notes               String?
  file                String?
  createdAt           DateTime? @default(now())
  synced              Boolean   @default(false)
}

model StudentBreakdown {
  id                  Int       @id @default(autoincrement())
  sheetId             String?   @unique
  creditApplicationId String?
  feeType             String?
  term                String?
  grade               String?
  numberOfStudents    Int?
  fee                 Float?
  totalRevenue        Float?
  createdAt           DateTime? @default(now())
  synced              Boolean   @default(false)
}

model OtherSupportingDoc {
  id                  Int       @id @default(autoincrement())
  sheetId             String?   @unique
  creditApplicationId String?
  documentType        String?
  notes               String?
  file                String?
  image               String?
  createdAt           DateTime? @default(now())
  synced              Boolean   @default(false)
}

model InvestmentCommittee {
  id                                                              Int       @id @default(autoincrement())
  sheetId                                                         String?   @unique
  creditApplicationId                                             String?
  auditedFinancialsProvided                                       String?
  schoolHasBankAccountAndChecks                                   String?
  annualRevenueFromBankaAndMPesaStatements                        String?
  totalCashHeldInBankAndMPesaAccounts                             String?
  debtRatio                                                       String?
  loanLengthMonths                                                String?
  annualReducingInterestRate                                      String?
  totalEstimatedValueOfAssets                                     String?
  predictedDaysLate                                               Int?
  averageBankBalance                                              String?
  createdAt                                                       DateTime? @default(now())
  synced                                                          Boolean   @default(false)
  totalAnnualRevenueFromFeesFromStudentBreakdownUnadjusted        String?
  ageOfSchool                                                     String?
  annualDonationRevenue                                           String?
  annualFoodExpenseEstimateIncludingCookSalaries                  String?
  annualNonSchoolRevenueGenerated                                 String?
  annualProfitExcludingFoodAndTransportExpenses                   String?
  annualProfitIncludingFoodAndTransportExpenses                   String?
  annualSponsorshipRevenue                                        String?
  annualTransportExpenseEstimateIncludingDriverSalaries           String?
  assetValueHasIncreasedFromTwoYearsAgo                           String?
  averageBankBalanceTotalUnadjustedRevenue                        String?
  averageSchoolFeesCharged                                        String?
  collateralCoverageOfLoanAmountRequested                         String?
  collectionsRate                                                 String?
  currentDebtToIncome                                             String?
  growthInPopulation                                              String?
  incorporationStructure                                          String?
  lesserOfMonthlyProfitAnd35PercentProfitMargin                   String?
  maximumLoan                                                     String?
  maximumMonthlyPayment                                           String?
  maximumPreviousDaysLate                                         String?
  monthlyProfitIncludingAllExpenses                               String?
  numberOfInstallmentsPaidLate                                    String?
  numberOfStudentsFromEnrollmentVerification                      String?
  numberOfStudentsPreviousYear                                    String?
  previousLoansWithJackfruit                                      String?
  previousRestructure                                             String?
  profitMarginTotalProfitTotalRevenueNotAdjustedDownTo35Percent   String?
  schoolCreditRisk                                                String?
  schoolId                                                        String?
  schoolIsProfitable                                              String?
  schoolSitsOnOwnedLeasedOrRentedLand                             String?
  solvencyAssetsLiabilities                                       String?
  sslId                                                           String?
  totalAnnualDebtPaymentOfSchoolAndDirectors                      String?
  totalAnnualExpensesExcludingFoodAndTransport                    String?
  totalAnnualOwnersDraw                                           String?
  totalAnnualSpendingOnRent                                       String?
  totalAnnualSpendingOnSalariesExcludingCooksAndDrivers           String?
  totalBadDebtOnCrbHeldBySchoolAndDirectors                       String?
  totalDebt                                                       String?
  totalDebtOnCrbFullyPaidOffBySchoolAndDirectors                  String?
  totalOfSalariesRentDebtAndOwnersDraw                            String?
  typeOfSchool                                                    String?
  annualExpenseEstimateExcludingPayrollRentDebtOwnersDrawFoodAndT String?
  lesserOfAnnualRevenueFromBankaAndMPesaStatementsAnd75PercentCol String?
}

model VendorDisbursementDetail {
  id                              Int       @id @default(autoincrement())
  sheetId                         String?   @unique
  creditApplicationId             String?
  vendorPaymentMethod             String?
  phoneNumberForMPesaPayment      String?
  managerVerification             String?
  documentVerifyingPaymentAccount String?
  bankName                        String?
  accountName                     String?
  accountNumber                   String?
  phoneNumberForBankAccount       String?
  paybillNumberAndAccount         String?
  buyGoodsTill                    String?
  createdAt                       DateTime? @default(now())
  synced                          Boolean   @default(false)
}

model HomeVisit {
  id                             Int       @id @default(autoincrement())
  sheetId                        String?   @unique
  creditApplicationId            String?
  userId                         String?
  county                         String?
  addressDetails                 String?
  locationPin                    String?
  ownOrRent                      String?
  howManyYearsStayed             String?
  maritalStatus                  String?
  howManyChildren                String?
  isSpouseInvolvedInSchool       String?
  doesSpouseHaveOtherIncome      String?
  ifYesHowMuchPerMonth           String?
  isDirectorBehindOnUtilityBills String?
  totalNumberOfRooms             String?
  howIsNeighborhood              String?
  howAccessibleIsHouse           String?
  isDirectorHomeInSameCity       String?
  isDirectorTrainedEducator      String?
  doesDirectorHaveOtherBusiness  String?
  otherNotes                     String?
  createdAt                      DateTime? @default(now())
  synced                         Boolean   @default(false)
}

model AssetTitle {
  id                                Int       @id @default(autoincrement())
  sheetId                           String?   @unique
  creditApplicationId               String?
  type                              String?
  toBeUsedAsSecurity                String?
  description                       String?
  legalOwner                        String?
  userId                            String?
  fullOwnerDetails                  String?
  collateralOwnedByDirectorOfSchool String?
  plotNumber                        String?
  schoolSitsOnLand                  String?
  hasComprehensiveInsurance         String?
  originalInsuranceCoverage         String?
  initialEstimatedValue             String?
  approvedByLegalTeamOrNTSAAgent    String?
  notesOnApprovalForUse             String?
  evaluatorsMarketValue             String?
  evaluatorsForcedValue             String?
  moneyOwedOnAsset                  String?
  licensePlateNumber                String?
  engineCC                          String?
  yearOfManufacture                 String?
  logbookPhoto                      String?
  titleDeedPhoto                    String?
  fullTitleDeed                     String?
  evaluatorsReport                  String?
  createdAt                         DateTime? @default(now())
  synced                            Boolean   @default(false)
}

model ContractDetails {
  id                                     Int       @id @default(autoincrement())
  sheetId                                String?   @unique
  creditApplicationId                    String?
  loanLengthRequestedMonths              String?
  monthsSchoolRequestsForgiveness        String?
  disbursalDateRequested                 String?
  tenPercentDownOnVehicleOrLandFinancing String?
  createdBy                              String?
  createdAt                              DateTime? @default(now())
  synced                                 Boolean   @default(false)
}

model CreditApplicationComment {
  id                  Int       @id @default(autoincrement())
  sheetId             String?   @unique
  creditApplicationId String?
  commenterType       String?
  comments            String?
  commenterName       String?
  createdAt           DateTime? @default(now())
  synced              Boolean   @default(false)
}

model DirectPaymentSchedule {
  id                                             Int      @id @default(autoincrement())
  sheetId                                        String?  @unique
  borrowerId                                     String?
  dueDate                                        String?
  amountDue                                      String?
  amountPaid                                     String?
  createdAt                                      DateTime @default(now())
  synced                                         Boolean  @default(false)
  adjustedMonth                                  String?
  amountStillUnpaid                              String?
  borrowerType                                   String?
  checkCashingStatus                             String?
  creditLifeInsuranceFeeInsuranceExpense         String?
  creditLifeInsuranceFeePaymentsUtilized         String?
  creditLifeInsuranceFeesCharged                 String?
  creditLifeInsuranceFeesOwedToInsurer           String?
  dateFullyPaid                                  String?
  daysLate                                       String?
  debtType                                       String?
  directLoanId                                   String?
  holidayForgiveness                             String?
  interestChargedWithoutForgiveness              String?
  interestRepaymentDue                           String?
  notesOnPayment                                 String?
  par14                                          String?
  par30                                          String?
  paymentOverdue                                 String?
  principalRepaymentDue                          String?
  principalRepaymentWithoutForgiveness           String?
  vehicleInsuranceFeesOwedToInsurer              String?
  vehicleInsurancePaymentDue                     String?
  vehicleInsurancePaymentDueWithoutForgiveness   String?
  vehicleInsurancePremiumDueWithForgiveness      String?
  vehicleInsurancePremiumDueWithoutForgiveness   String?
  vehicleInsuranceSurchargeDueWithForgiveness    String?
  vehicleInsuranceSurchargeDueWithoutForgiveness String?
}

model Loan {
  id                                                              Int      @id @default(autoincrement())
  sheetId                                                         String?  @unique
  loanType                                                        String?
  loanPurpose                                                     String?
  borrowerType                                                    String?
  borrowerId                                                      String?
  borrowerName                                                    String?
  principalAmount                                                 String?
  interestType                                                    String?
  annualDecliningInterest                                         String?
  annualFlatInterest                                              String?
  processingFeePercentage                                         String?
  creditLifeInsurancePercentage                                   String?
  securitizationFee                                               String?
  processingFee                                                   String?
  creditLifeInsuranceFee                                          String?
  numberOfMonths                                                  String?
  dailyPenalty                                                    String?
  amountToDisburse                                                String?
  totalComprehensiveVehicleInsurancePaymentsToPay                 String?
  totalInterestCharged                                            String?
  totalInterestToPay                                              String?
  totalPrincipalToPay                                             String?
  creditApplicationId                                             String?
  firstPaymentPeriod                                              String?
  createdBy                                                       String?
  totalLoanAmountPaidIncludingPenaltiesAndInsurance               String?
  totalPenaltiesAssessed                                          String?
  totalPenaltiesPaid                                              String?
  penaltiesStillDue                                               String?
  sslId                                                           String?
  loanOverdue                                                     String?
  par14                                                           String?
  par30                                                           String?
  par60                                                           String?
  par90                                                           String?
  par120                                                          String?
  amountOverdue                                                   String?
  loanFullyPaid                                                   String?
  loanStatus                                                      String?
  totalAmountDueToDate                                            String?
  amountDisbursedToDateIncludingFees                              String?
  balanceOfDisbursementsOwed                                      String?
  principalPaidToDate                                             String?
  outstandingPrincipalBalance                                     String?
  numberOfAssetsUsedAsCollateral                                  String?
  numberOfAssetsRecorded                                          String?
  allCollateralRecorded                                           String?
  principalDifference                                             String?
  creditLifeInsuranceSubmitted                                    String?
  directorHasCompletedCreditLifeHealthExamination                 String?
  recordOfReceiptForCreditLifeInsurance                           String?
  percentDisbursed                                                String?
  daysLate                                                        String?
  totalUnpaidLiability                                            String?
  restructured                                                    String?
  collateralCheckedByLegalTeam                                    String?
  hasFemaleDirector                                               String?
  reportsGenerated                                                String?
  contractUploaded                                                String?
  percentChargeOnVehicleInsuranceFinancing                        String?
  customerCareCallDone                                            String?
  checksHeld                                                      String?
  remainingPeriodsForChecks                                       String?
  adequateChecksForRemainingPeriods                               String?
  totalLiabilityAmountFromContract                                String?
  liabilityCheck                                                  String?
  creditLifeInsurer                                               String?
  interestChargedVsDueDifference                                  String?
  principalDueWithForgivenessVsWithoutForgiveness                 String?
  insuranceDueWithVsWithoutForgiveness                            String?
  firstLoan                                                       String?
  additionalFeesWithheldFromDisbursement                          String?
  daysSinceCreation                                               String?
  referral                                                        String?
  numberOfInstallmentsOverdue                                     String?
  amountPaidTowardsOverdueInstallments                            String?
  borrowerIdForContracts                                          String?
  mostRecentInstallmentPartiallyPaid                              String?
  willingnessToPay                                                String?
  capabilityToPay                                                 String?
  loanRiskCategory                                                String?
  calculatedAmountToDisburse                                      String?
  differenceBetweenCalculatedAndRecordedDisbursement              String?
  teachers                                                        String?
  totalInterestPaid                                               String?
  outstandingInterestBalance                                      String?
  totalVehicleInsuranceDue                                        String?
  totalVehicleInsurancePaid                                       String?
  outstandingVehicleInsuranceBalance                              String?
  reassigned                                                      String?
  flexiLoan                                                       String?
  loanQualifiesForCatalyzeProgram                                 String?
  allStaff                                                        String?
  loanHasGonePAR30                                                String?
  hasMaleDirector                                                 String?
  schoolArea                                                      String?
  firstDisbursement                                               String?
  totalAdditionalFeesNotWithheldFromDisbursement                  String?
  additionalFeesNotWithheldFromDisbursementPaid                   String?
  additionalFeesNotWithheldFromDisbursementStillDue               String?
  averageSchoolFees                                               String?
  contractingDate                                                 String?
  submittedToCatalyze                                             String?
  mostRecentContract                                              String?
  mostRecentContractType                                          String?
  schoolType                                                      String?
  howManyClassroomsWillBeConstructedWithTheLoan                   String?
  howManyVehiclesWillBePurchasedWithTheLoan                       String?
  principalWrittenOff                                             String?
  interestWrittenOff                                              String?
  vehicleInsuranceWrittenOff                                      String?
  segmentedRepaymentView                                          String?
  beforeJan12024                                                  String?
  loanNumber                                                      String?
  teamLeader                                                      String?
  vehicleInsuranceWithoutForgivenessCheck                         String?
  vehicleInsuranceWithForgivenessCheck                            String?
  suspendedInterestCharged                                        String?
  suspendedInterestDue                                            String?
  region                                                          String?
  exciseDuty                                                      String?
  createdAt                                                       DateTime @default(now())
  synced                                                          Boolean  @default(false)
  totalLiabilityAmountIncludingPenaltiesAndComprehensiveVehicleInsurance String?
}

model FinancialSurvey {
  id                              Int       @id @default(autoincrement())
  sheetId                         String?   @unique
  creditApplicationId             String?
  surveyDate                      String?
  directorId                      String?
  schoolGrades                    String?
  isSchoolAPBETOrPrivate          String?
  isChurchSupported               String?
  churchName                      String?
  churchAnnualSupport             String?
  churchBenefits                  String?
  facilityOwnership               String?
  annualLeaseRent                 String?
  ownerAnnualWithdrawal           String?
  monthlyDebtPayments             String?
  providesMeals                   String?
  termlyFoodExpense               String?
  termlyFuelExpense               String?
  annualStudentTextbookExpense    String?
  annualTeacherTextbookExpense    String?
  termlyStationeryExpense         String?
  monthlyWifiExpense              String?
  termlyAirtimeExpense            String?
  monthlyWaterExpense             String?
  termlyMiscExpense               String?
  annualTaxLicenseExpense         String?
  monthlyElectricityExpense       String?
  hasVehicles                     String?
  termlyVehicleServiceExpense     String?
  termlyVehicleFuelExpense        String?
  totalVehiclePurchaseExpense     String?
  annualEquipmentFurnitureExpense String?
  annualRepairMaintenanceExpense  String?
  hasOtherRevenue                 String?
  otherRevenueSources             String?
  annualOtherRevenue              String?
  sponsoredChildrenCount          String?
  annualSponsorshipRevenue        String?
  lastYearAssetValue              String?
  lastYearLoanDeposits            String?
  previousYearStudentCount        String?
  leaseAgreement                  String?
  receivesSignificantDonations    String?
  annualDonationRevenue           String?
  majorProjectsAndMitigation      String?
  nextYearExpectedStudents        String?
  twoYearsAgoAssetValue           String?
  currentBankBalance              String?
  yearsAtCurrentPremises          String?
  yearsWithBankAccount            String?
  hasAuditedFinancials            String?
  branchCount                     String?
  hasMicrofinanceBorrowing        String?
  hasFormalBankBorrowing          String?
  createdAt                       DateTime? @default(now())
  synced                          Boolean   @default(false)
  annualExpenseEstimate           String?
  annualFoodExpenseEstimate       String?
  annualTransportExpenseEstimate  String?
  createdBy                       String?
}

enum TripStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
  REFUNDED
  CANCELLED
}

enum SectionType {
  banner
  content
}

enum NewsletterCategory {
  IMPACT_STORIES
  SUCCESS_STORIES
  PARTNERSHIPS
  ALL_UPDATES
}

enum MessageType {
  GENERAL_INQUIRY
  SUPPORT_REQUEST
  PARTNERSHIP_INQUIRY
  FEEDBACK
  OTHER
}

enum Platform {
  WEBSITE
  MOBILE_APP
  API
  EMAIL
  PHONE
}

enum MessageStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}


model ContactMessage {
  id          String   @id @default(uuid())
  messageType String
  name        String
  email       String
  subject     String
  message     String
  platform    String
  status      String   @default("NEW")
  viewedBy    String?
  viewedAt    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("contactMessage")
}

model Customer {
  id              Int      @id @default(autoincrement())
  companyLogo     String?
  companyName     String
  contactPerson   String
  phoneNumber     String
  emailAddress    String   @unique
  numberOfSchools Int      @default(0)
  isActive        Boolean  @default(true)
  userId          Int?     @unique
  user            User?    @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
