datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    Int         @id @default(autoincrement())
  email                 String      @unique
  name                  String
  password              String
  roleId                Int?
  role                  Role?       @relation(fields: [roleId], references: [id])
  isActive              Boolean     @default(true)
  requirePasswordReset  Boolean     @default(false)
  lastLoggedInOn        DateTime?
  lastPasswordChangedOn DateTime    @default(now())
  createdAt             DateTime    @default(now())
  createdPesticides     Pesticide[] @relation("CreatedBy") // Add this reverse relation
  updatedPesticides     Pesticide[] @relation("LastUpdatedBy") // Add this reverse relation
  sspUser               SspUser?    @relation("UserSspUser")
  farmerUser            FarmerUser? @relation("UserFarmerUser")
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  permissions     RolePermission[]
  users           User[]
  isActive        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  lastUpdatedAt   DateTime?
  createdById     Int?
  lastUpdatedById Int?
}

model Permission {
  id    Int              @id @default(autoincrement())
  name  String           @unique
  roles RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId]) // Ensure no duplicate role-permission pairs
}

model Pesticide {
  id                       Int       @id @default(autoincrement())
  name                     String    @unique
  registrationNumber       String    @unique
  activeAgent              String
  manufacturerOfRegistrant String
  localAgent               String
  published                Boolean   @default(false) // Default value set to false
  createdAt                DateTime  @default(now())
  lastUpdatedAt            DateTime?
  createdById              Int?
  lastUpdatedById          Int?
  createdBy                User?     @relation("CreatedBy", fields: [createdById], references: [id])
  lastUpdatedBy            User?     @relation("LastUpdatedBy", fields: [lastUpdatedById], references: [id])
}

model Pest {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  scientificName  String    @unique
  kingdom         String
  phylum          String?
  genus           String
  family          String
  published       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  lastUpdatedAt   DateTime?
  createdById     Int?
  lastUpdatedById Int?
}

model County {
  id              Int          @id @default(autoincrement())
  name            String       @unique
  isActive        Boolean      @default(false)
  createdAt       DateTime     @default(now())
  lastUpdatedAt   DateTime?
  createdById     Int?
  lastUpdatedById Int?
  farms           FarmerFarm[] @relation("FarmInCounty")
  ssps            SspUser[] @relation("SspInCounty")
}

model ServiceType {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  description     String    @db.Text
  isActive        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  lastUpdatedAt   DateTime?
  createdById     Int?
  lastUpdatedById Int?
  servicesRequested  ServiceRequestService[]
}

model SspUser {
  id               Int              @id @default(autoincrement())
  email            String           @unique
  phoneNumber      String           @unique
  firstName        String
  middleName       String?
  lastName         String
  gender           String?
  occupation       String?
  dob              String?
  userId           Int?             @unique
  user             User?            @relation(name: "UserSspUser", fields: [userId], references: [id], onDelete: Cascade)
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  lastUpdatedAt    DateTime         @updatedAt
  createdById      Int?
  lastUpdatedById  Int?
  assignedRequests ServiceRequest[] @relation(name: "SspAssignedServiceRequest")
  schedules     SspSchedule[]
  bids  SspBidding[] 
  countyId        Int?
  county          County?          @relation(name: "SspInCounty", fields: [countyId], references: [id], onDelete: Cascade)
}




model FarmerUser {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  phoneNumber     String
  gender          String?
  occupation      String?
  dob             String?
  firstName       String
  middleName      String?
  lastName        String
  userId          Int?             @unique
  user            User?            @relation(name: "UserFarmerUser", fields: [userId], references: [id], onDelete: Cascade)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  lastUpdatedAt   DateTime         @updatedAt
  createdById     Int?
  lastUpdatedById Int?
  farms           FarmerFarm[]     @relation("FarmerFarmUser")
  serviceRequests ServiceRequest[] @relation(name: "FarmerServiceRequest")
  serviceBids  SspBidding[]
}

model FarmerFarm {
  id              Int              @id @default(autoincrement())
  plotSize        String?
  countyId        Int?
  county          County?          @relation(name: "FarmInCounty", fields: [countyId], references: [id], onDelete: Cascade)
  location        String?
  latitude        String?
  longitude       String?
  imageUrl        String?
  farmerId        Int?
  farmer          FarmerUser?      @relation(name: "FarmerFarmUser", fields: [farmerId], references: [id], onDelete: Cascade)
  altitude        String?
  soilType        String?
  soilTemp        String?
  humidity        String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  lastUpdatedAt   DateTime         @updatedAt
  createdById     Int?
  lastUpdatedById Int?
  crops           CropsInFarm[]    @relation("CropsInFarm")
  serviceRequests ServiceRequest[] @relation(name: "FarmServices")
}

model Crop {
  id              Int           @id @default(autoincrement())
  name            String        @unique
  scientificName  String?
  description     String?
  isActive        Boolean       @default(false)
  createdAt       DateTime      @default(now())
  lastUpdatedAt   DateTime?     @updatedAt
  createdById     Int?
  lastUpdatedById Int?
  farms           CropsInFarm[] @relation("CropsInFarm")
  serviceRequests           ServiceRequestCrops[] @relation("CropsInRequest")
}

model CropsInFarm {
  id              Int        @id @default(autoincrement())
  farmId          Int
  farm            FarmerFarm @relation(name: "CropsInFarm", fields: [farmId], references: [id], onDelete: Cascade)
  cropId          Int
  crop            Crop       @relation(name: "CropsInFarm", fields: [cropId], references: [id], onDelete: Cascade)
  description     String?
  cropStatus      String?
  isActive        Boolean    @default(false)
  createdAt       DateTime   @default(now())
  lastUpdatedAt   DateTime?  @updatedAt
  createdById     Int?
  lastUpdatedById Int?
}

model ServiceRequest {
  id              Int         @id @default(autoincrement())
  description     String?
  farmerId        Int?
  farmer          FarmerUser? @relation(name: "FarmerServiceRequest", fields: [farmerId], references: [id], onDelete: Cascade)
  farmId          Int
  farm            FarmerFarm  @relation(name: "FarmServices", fields: [farmId], references: [id], onDelete: Cascade)
  assignedSspId   Int?
  assignedSsp     SspUser?    @relation(name: "SspAssignedServiceRequest", fields: [assignedSspId], references: [id], onDelete: SetNull)
  requestStatus   String?
  sspScheduleId    Int?
  isConfirmed       Boolean     @default(false)
  isActive        Boolean     @default(true)
  isPublished        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  sspRating          Int?
  urgency            String?
  requestDate     DateTime?
  dateStarted     DateTime?
  dateCompleted   DateTime?
  lastUpdatedAt   DateTime    @updatedAt
  createdById     Int?
  lastUpdatedById Int?
  farmersBudget Float?
  serviceCosts    Float?
  requestedServicesIds String?
  assignedSspSchedule  SspSchedule?
  bids  SspBidding[]
  crops  ServiceRequestCrops[]
  servicesRequested  ServiceRequestService[]
}
model ServiceRequestService {
    id              Int         @id @default(autoincrement())
    serviceTypeId   Int
    serviceType   ServiceType  @relation(fields: [serviceTypeId], references: [id], onDelete: Cascade)
    serviceRequestId Int
    serviceRequest          ServiceRequest  @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
}

model ServiceRequestCrops {
    id              Int         @id @default(autoincrement())
    cropId   Int
    crop            Crop       @relation(name: "CropsInRequest", fields: [cropId], references: [id], onDelete: Cascade)
    serviceRequestId Int
    serviceRequest          ServiceRequest  @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
}

model SspSchedule {
  id            Int       @id @default(autoincrement())
  sspId         Int
  ssp           SspUser   @relation(fields: [sspId], references: [id], onDelete: Cascade)
  date          DateTime
  startTime     DateTime 
  endTime       DateTime 
  hasRequests  Boolean   @default(false)
  isBooked      Boolean   @default(false) // If booked, set to true
   isAvailable     Boolean   @default(true)
   serviceRequestId Int? @unique
   serviceRequest  ServiceRequest? @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
   createdAt     DateTime  @default(now())
  lastUpdatedAt DateTime  @updatedAt

}

model SspBidding {
  id              Int         @id @default(autoincrement())
  serviceRequestId        Int
  serviceRequest          ServiceRequest  @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  sspId          Int
  ssp            SspUser      @relation(fields: [sspId], references: [id], onDelete: Cascade)
  farmerId          Int
  farmer            FarmerUser      @relation(fields: [farmerId], references: [id], onDelete: Cascade)
  scheduleId     String?
  status         String       @default("Pending") // Pending, Confirmed, Completed, Cancelled
  requestedByFarmer  Boolean   @default(false)
  createdAt      DateTime     @default(now())
  lastUpdatedAt  DateTime     @updatedAt
}


// Shared enum
enum SectionType {
  banner
  content
}

// === Top‐level Case Study ===
model CaseStudy {
  id          String               @id @default(uuid())
  link        String               @unique
  order       Int
  title       String
  description String
  stats       Json
  isActive    Boolean              @default(true)

  // Banner image blob
  bannerMime  String?
  bannerBlob  Bytes?

  // relations
  sections    CaseStudySection[]   @relation("CaseStudyToSections")
  cta         CaseStudyCta?

  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@map("CaseStudy")
}

// Per‐item CTA
model CaseStudyCta {
  caseStudyId String  @id
  title       String
  description String
  buttonText  String
  buttonRoute String

  caseStudy   CaseStudy @relation(fields: [caseStudyId], references: [id], onDelete: Cascade)

  @@map("CaseStudyCta")
}

// Page‐level banner (singleton)
model CaseStudiesPageBanner {
  id          Int     @id @default(1)
  eyebrow     String
  headline    String
  subtitle    String?
  // can also store blob but now we have URL or JSON
  imageUrl    String?

  @@map("CaseStudiesPageBanner")
}

// Page‐level CTA (singleton)
model CaseStudiesPageCta {
  id          Int     @id @default(1)
  title       String
  description String
  buttonText  String
  buttonLink  String

  @@map("CaseStudiesPageCta")
}

// === Case Study Sections ===
model CaseStudySection {
  id           String                 @id @default(uuid())
  caseStudyId  String
  order        Int
  type         SectionType
  isActive     Boolean                    @default(true)
  data         Json
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt

  media        CaseStudySectionMedia[]
  caseStudy    CaseStudy              @relation("CaseStudyToSections", fields: [caseStudyId], references: [id], onDelete: Cascade)

  @@index([caseStudyId])
}

model CaseStudySectionMedia {
  id                  String               @id @default(uuid())
  caseStudySectionId  String
  mimeType            String
  blob                Bytes

  section             CaseStudySection     @relation(fields: [caseStudySectionId], references: [id], onDelete: Cascade)

  @@index([caseStudySectionId])
  @@map("SectionMedia")
}

// ── newsletter listing page singletons ─────────────────────────────────────────

model NewsletterPageBanner {
  id        String  @id @default(uuid())
  eyebrow   String
  headline  String
  subtitle  String?
  // store as blob or Data‑URL?
  imageUrl  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewsletterPageCta {
  id          String  @id @default(uuid())
  title       String
  description String
  buttonText  String
  buttonLink  String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// ── per‑newsletter record + its per‑item CTA ─────────────────────────────────

model Newsletter {
  id          String    @id @default(uuid())
  order       Int
  title       String
  date        String
  description String
  category    String
  isActive    Boolean   @default(true)

  // optional per‑item banner image
  bannerMime  String?
  bannerBlob  Bytes?

  // per‑item “Read more” CTA
  cta         NewsletterCta?

  sections    NewsletterSection[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model NewsletterCta {
  newsletterId String @id
  title        String
  description  String
  buttonText   String
  buttonLink   String

  newsletter   Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// ── newsletter detail sections ────────────────────────────────────────────────
model NewsletterSection {
  id            String               @id @default(uuid())
  newsletterId  String
  order         Int
  type          SectionType
  data          Json                // holds SectionDataBanner or SectionDataContent
  isActive      Boolean              @default(true)

  media         NewsletterSectionMedia[]
  newsletter    Newsletter           @relation(fields: [newsletterId], references: [id], onDelete: Cascade)

  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  @@index([newsletterId])
}

model NewsletterSectionMedia {
  id                   String   @id @default(uuid())
  newsletterSectionId  String
  mimeType             String
  blob                 Bytes

  section              NewsletterSection @relation(fields: [newsletterSectionId], references: [id], onDelete: Cascade)

  @@index([newsletterSectionId])
}


model SslStaff {
  id                    String    @id // Changed from Int to String for alphanumeric IDs
  name                  String
  type                  String
  borrowerId            String
  email                 String
  sslId                 String
  nationalIdNumber      String
  nationalIdFront       String?   // File path/URL
  nationalIdBack        String?   // File path/URL
  kraPinNumber          String?
  kraPinPhoto           String?   // File path/URL
  phoneNumber           String
  status                String    @default("Active")
  roleInSchool          String
  dateOfBirth           String
  address               String
  gender                String
  postalAddress         String?
  startDate             String
  insuredForCreditLife  Boolean   @default(false)
  paymentThisMonth      Boolean   @default(false)
  terminationDate       String?
  educationLevel        String?
  sslEmail              String?
  secondaryRole         String?
  monthlyTarget         String?
  creditLifeHelper      String?
  teamLeader            String?
  passportPhoto         String?   // File path/URL
  sslLevel              String?
  sslArea               String?
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  lastUpdatedAt         DateTime  @updatedAt
  createdById           Int?
  lastUpdatedById       Int?
  dailyWorkPlans        DailyWorkPlan[]

  @@map("ssl_staff")
}

model DailyWorkPlan {
  id                    Int       @id @default(autoincrement())
  date                  DateTime
  plannedVisit          String    @db.Text
  actualGpsCoordinates  String?
  callsMadeDescription  String    @db.Text
  notes                 String?   @db.Text
  supervisorReview      String?   @db.Text
  status                String    @default("Pending")
  sslStaffId            String    // Changed from Int to String to match SslStaff ID
  sslStaff              SslStaff  @relation(fields: [sslStaffId], references: [id], onDelete: Cascade)
  schoolId              String?   // School ID reference
  school                School?   @relation(fields: [schoolId], references: [id], onDelete: SetNull)
  teamLeaderId          String?   // Team Leader ID
  schoolName            String?   // School Name (auto-populated from school.name)
  region                String?   // Region (auto-populated from sslStaff.sslArea)
  taskOfTheDay          String?   @db.Text // Task of the Day
  pinnedLocation        String?   // Pinned Location
  locationIsVerified    Boolean   @default(false) // Location Is Verified
  marketingOfficerComments String? @db.Text // Marketing Officer Comments
  createdAt             DateTime  @default(now())
  lastUpdatedAt         DateTime  @updatedAt
  createdById           Int?
  lastUpdatedById       Int?

  @@map("daily_work_plan")
}


model School {
  id                    String    @id // Alphanumeric ID from sheet
  name                  String
  schoolId              String    @unique // Unique school identifier
  sslId                 String?   // SSL ID from sheet
  locationPin           String?   // Location Pin from sheet
  email                 String?
  phoneNumber           String?
  address               String?
  postalAddress         String?
  county                String?
  region                String?
  schoolType            String?   // Primary, Secondary, etc.
  status                String    @default("Active")
  principalName         String?
  principalPhone        String?
  principalEmail        String?
  totalStudents         Int?
  totalTeachers         Int?
  registrationNumber    String?
  establishmentDate     String?
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  lastUpdatedAt         DateTime  @updatedAt
  createdById           Int?
  lastUpdatedById       Int?
  dailyWorkPlans        DailyWorkPlan[]

  @@map("schools")
}

